#!/bin/bash

# set -euo pipefail

################################################################################
# Determine where this script is stored
# Solve for the current directory
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
################################################################################

CUSTOM_ROOT="/usr/local/.programs"
THIS_SCRIPT="${DIR}/$(basename ${0})"

printf "Using (%s) as the path of the provisioner script\n" "${THIS_SCRIPT}"

################################################################################

# Check permissions

printf "Running as %s (%s)\n" "$(whoami)" "$(id)"

if [[ $EUID -ne 0 ]] ; then
    printf "%s\n" "Attempting to elevate..."
    # re-launch as root
    exec sudo -i bash "${THIS_SCRIPT}"
fi

# this should not be able to occur
if [[ $EUID -ne 0 ]] ; then
    # at this point, we should be running as root
    # if not, then using `sudo` failed
    printf "%s\n" "Could not elevate to root"
    exit 1
else
    printf "%s\n" "Successfully elevated privileges"
fi

################################################################################

# Provisioner part

mkdir -p "${CUSTOM_ROOT}"
cd "${CUSTOM_ROOT}"

apt-get update
apt-get dist-upgrade -y
apt-get install -y -q=5 zip unzip openjdk-11-jdk gdb python3 git python3-pip tmux zsh
apt-get clean

cd "${CUSTOM_ROOT}"
python3 -m pip -q install --upgrade pip
python3 -m pip -q install --upgrade pwntools
wget --quiet "https://ghidra-sre.org/ghidra_9.2.2_PUBLIC_20201229.zip"
unzip -q "ghidra_9.2.2_PUBLIC_20201229.zip"
rm -vf "ghidra_9.2.2_PUBLIC_20201229.zip"
cd "ghidra_9.2.2_PUBLIC"
printf "export PATH=${PATH}:$(pwd)\n" >> /etc/profile

cd "${CUSTOM_ROOT}"
git clone https://github.com/pwndbg/pwndbg
cd pwndbg
./setup.sh

mkdir -p /etc/gdb/
cat <<- _EOF_ >> /etc/gdb/gdbinit
    source $(pwd)/gdbinit.py
_EOF_

printf "Done! Use the following command to log in: %s\n" "vagrant ssh -- -X"
printf "To use Ghidra, use the command: %s\n" "ghidraRun"
